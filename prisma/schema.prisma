// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  cart          Cart[]
  orders        Order[]
  reviews       Review[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  products  Product[] // One-to-many relation with Product
}

model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String      @unique(map: "product_slug_idx")
  categoryId  String      @db.Uuid 
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      String[] // for the slider
  description String
  price       Decimal?    @default(0) @db.Decimal(12, 2)
  salePrice   Decimal?    @db.Decimal(12, 2)
  rating      Decimal     @default(0) @db.Decimal(3, 2)
  numReviews  Int         @default(0)
  type        ProductType // enum for product type (Simple or Variable)
  stock       Int? // optional stock for Simple products

  createdAt  DateTime    @default(now()) @db.Timestamp(6)
  orderItems OrderItem[]
  reviews    Review[]

  attributes      Attribute[] // to hold the attributes for the products: color, size, etc.
  attributeValues AttributeValue[] // to hold the values for the attributes: red, blue, etc.
  variants        ProductVariation[]
}

enum ProductType {
  simple
  variable
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  variant   String?
  variantId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId, variantId], map: "orderitems_orderId_variantId_productId_pk")
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// for the variation of the product
// ---------------------------------
model Attribute {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String // Attribute name (e.g., Color, Size)
  slug      String?          @unique // Slug for referencing (e.g., 'color', 'size')
  createdAt DateTime         @default(now()) @db.Timestamp(6)
  values    AttributeValue[] // array of values for the attribute

  Product Product[]
}

// this are the options for the attribute
model AttributeValue {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attributeId      String             @db.Uuid
  attribute        Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  value            String // Value for the attribute (e.g., Red, Blue, Medium)
  createdAt        DateTime           @default(now()) @db.Timestamp(6)
  productVariation ProductVariation[]
  product          Product[]
}

// ---------------------------------

// this appears in the product page edit or create
// ---------------------------------
model ProductVariation {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId       String?           @db.Uuid
  product         Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValues AttributeValue[]
  stock           Int
  price           Decimal          @default(0) @db.Decimal(12, 2)
  salePrice       Decimal?         @db.Decimal(12, 2)
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
}

// multiple values for the attribute: [sizeId, colorId]
// ---------------------------------
